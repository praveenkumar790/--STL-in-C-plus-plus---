/*  C++ STL

// LECTURE-1


#include<bits/stdc++.h>
using namespave std;

namespace raj {
    int val =50;
    int getval()
    {
        return valt*10;
    }
}

int main()
{
    double val =10.0;
    cout<<val<<endl;   //print 10.0

    cout<<raj:getval()<<endl;   //prints 50
}


//create a data type where you store
{string,int,double,char}

struct node
{
    string str;
    int num;
    double doub;
    char x;

    //define a constructour
    node(str_,num_,doub_,x_)
    {
        str=str_;
        num=num_;
        doub=doub_;
        x=x_;
    }

};

int main()
{
    //wrong way of defining
    node raj;
    raj.str="striver";
    raj.num=79;
    raj.doub=91.0;

    //right way of defining
    node *raj= new node("striver",79,91.0,"");
}



//CONTAINER

Array -> int arr[100];
another way of defining array -> array<int,100> arr;

if you define arr<int,3> arr globaly it intialize as {0,0,0}
but if  arr<int,3> arr is define inside main then it intialize as {?,?,?}   ?->any garbage value
also  if arr<int,3> arr ={1}; then // {1,0,0}

array<int,5> arr;
arr.fill(3);  //fill() function fill the whole array with the given number

arr.at(index);
for(int i=0;i<5;i++)
{
    cout<< arr.at(i) <<" ";      //print the array
}




//iterators
some iterators --> begin(),end(),rbegin(),rend()
begin() ->it point to first element
rbegin() -> it point to last element (reverse begin)
end() -> it point to n+1 element or after the end(last) elment
rend() -> it point to before first element


array<int,5> arr={1,3,4,5,6}
//way of printing array   
for(int i=0;i<5;i++)
{
    arr.at(i);
}

//another way
for(auto it = arr.begin(); it!=arr.end();it++)
{
    cout<<*it<<" ";
}

//in reverse order
for(auto it = arr.rbegin();it>arr.rend();it++)
{
    cout<<*it<<" ";
}

or

for(auto it = arr.end-1;it>=arr.begin();it--)
{
    cout<<*it<<" ";
}

//for each loop
for(auto it:arr)
{
    cout<<it<<" ";
}


string s="xhfjdffbb";
for(auto c:s)
{
    cout<<c<<" ";      //x h f j d f f b b ->output
}



//size
cout<<arr.size();

//front
cout<<arr.front();     //or ->arr.at(0);

//back
cout<<arr.back();      //or ->arr.at(arr.size()-1)


*/


/*
//VECTORS

//segmentation fault if you push_back 10^7 times

vector<int> arr;  ->{}
cout<<arr.size() <<endl;  // ->print 0
arr.push_back(0);  //{0}
arr.push_back(2);  //{0,2}
cout<<arr.size()<<endl;   // -> print 2
arr.pop_back();    //{0}
cout<<arr.size() <<endl;  //print 1

vec.clear();  // ->erase all elment at once {}

vector<int> vec1(4,0);  // ->{0,0,0,0}
vector<int> vec2(4,10);  // ->{10,10,10,10}

//copy the entire vec2 int vec3
vector<int> vec3(vec2.begin(),vec2.end());  ->[)
(or)
vector<int> vec3(vec2;) 



vector<int> raj;
raj.push_back(1);   //raj.emplace_back(1);  //emplace_back take less time than push_back
raj.push_back(3);
raj.push_back(2);
raj.push_back(5);

vector<int> raj1(raj.begin(),raj.brgin()+2);   // ->{1,3}


//swap  -> swap(v1,v2)
//begin(),end(),rbegin(),rend()


//to defining 2d vectors

vector<vector<int>> vec;

vector<int> raj1;
raj1.push_back(1);
raj1.push_back(2);

vector<int> raj2;
raj2.push_back(10);
raj2.push_back(20);

vector<int> raj3;
raj3.push_back(19);
raj3.push_back(24);
raj3.push_back(27);


vec.push_back(raj1);
vec.push_back(raj2);
vec.push_back(raj3);

//to print this 2d vector
for(auto vctr: vec)
{
    for(auto it: vctr)
    {
        cout<< it <<" ";
    }
    cout<<endl;
}


//define a 10 x 20 vector
vector<vector<int>> vec(10,vector<int> (20,0));
vec.push_back(vector<int>(20,0));
cout<< vec.size() <<endl;  //11 prints

vec[2].push_back(1);



vector<int> arr[4];  //here we define the array of vector 

//define a 10 x 20 x 30 vector
vector<vector<vector<int>>> vec(10,vector<vector<int>> vec(10,vector<int> (20,0)));


*/






// LECTURE-2

/*
//given n element, tell the number of unique elments
arr[] ={2,5,2,1,5}  // 3 unique element -> {1,2,5}  

set()-> take unique elment in the ascending order


set<int> st;
int n;
cin>>n;
for(int i=0;i<n;i++)
{
    int x;
    cin>>x;
    st.insert(x);
}

// st ->{1,2,5}
// erase functionality

st.erase(st.begin());   //st.erase(iterator)   //st ->{2,5}
//complexity ->log n

st.erase(st.begin(),st.begin()+2);  // ->[)
//st.erase(startiterator,enditerator)

st.erase(5);  //st.erase(key)  //delete the 5 


set<int> st={1,5,7,8};
auto it=st.find(7);    //log n  //it will be iterator to 7

auto it=st.find(9);    //it=st.end();


st.emplace(6);   //same as -> st.insert(6)
cout<<st.size() <<endl;   //size of set


//print the set
for(auto it:st)
{
    cout<<it<<endl;
}


//delete the entire set
st.erase(st.begin(),st.end());   //make sure the entire set is delete 




//UNORDERED_SET

unordered_set<int> st;

st.insert(2);
st.insert(3);
st.insert(1);

//average time complexity is o(1)
//but the wrost case is linear in nature ,o(set size)


//prefer unordered set if ascending order element is not required or when TLE not exceed 


//MULTISET
multiset<int> ms;
ms.insert(1);
ms.insert(1);
ms.insert(2);
ms.insert(2);
ms.insert(3);    //or ms.emplace(3)

//output -> {1,1,2,2,3}

ms.erase(2);   //all the instance will be erased

auto it=ms.find(2);  //return an iterator pointing to the first elment of 2
ms.clear();  //delete the entire set
ms.erase(ms.begin(),ms.end());  //delete the entire set

ms.erase(ms.find(2));    //delete a element 2
ms.erase(ms.find(2),ms.find(2)+2);  //delete 2 element of 2

//log n in size

//print
for(auto it: ms)
{
    cout<<it<<endl;
}

//finds how many times 2 occurs
st.count(2);






//KEY VALUE (or MAP)
//map only store unique keys
//log n is the time complexity of map

map<string,int> mpp;
mpp["raj"]=27;
mpp["hima"]=31;
mpp["sandeep"]=67;
mpp["tank"]=89; 

//arrange according to sorted order and only store unique key, value can be same for differnet keys

if you write mpp["raj"]=29; again then it overwrite the key replace 27 with 29

we can use mpp.emplace("raj",45); insted of mpp.["raj"]=45;

mpp.erase("raj");   //mpp.erase(key)
mpp.erase(mpp.begin());  //mpp.erase(iterator)
mpp.clear();  //entire map is cleaned up
mpp.erase(mpp.begin(),mpp.begin()+2);  //clean up  a given range

auto it =mpp.find("raj");   //points to where raj lies
auto it=mpp.find("simran")  //points to end since simran does not exist

//to check if map is empty
if(mpp.empty())
{
    cout<<"yes it is empty";
}

//printing map
for(auto it:mpp)
{
    cout<< it.first <<" "<<it.second <<endl;
}

(or)

for(auto it= mpp.begin(); it!= mpp.end();it++)
{
    cout<< it->first <<" "<< it->second <<endl;
}


//UNORDERED MAP
unordered_map<int,int> mpp;
//does not stores in any order 
//o(1) in almost all cases
//o(n) in the worst case,where n is the container size


//MULTIMAP
multimap<string,int> mpp;
mpp["raj"]=2;
mpp["raj"]=4;






//PAIR CLASS
pair<int,int> pr={1,2};
pair<pair<int,int>,int> pr={{1,2},2};
cout<<pr.first.second <<endl;  //output ->2 

pair<pair<int,int>,pair<int,int>> pr ={{1,2},{2,4}};
cout<<pr.first.first <<endl;   //output -> 1
cout<<pr.second.second<<endl;  //output -> 4

vector<pair<int,int>> vec;
set<pair<int,int>> st;
map< pair<int,int>,int> mpp;

//unordered map can't use pair class 





//STACK AND QUEUE

//STACK

stack<int> st;  //LIFO DS
//push() or emplace()
//pop()
//top()
//size()
//empty()

st.push(2);
st.push(4);
st.push(3);
st.push(1);


cout<<st.top();  //print 1
st.pop();  //delete the last entered elment
cout<<st.top();  //prints 3
st.pop(); 
cout<<st.top();   //prints 4

bool flag =st.empty();  //return true if stack is empty ,or false

//deleted the entire stack
while(!st.empty())
{
    st.pop();
}

cout<<st.size() <<endl;  //number of element in the stack

//check for empty stack before using any function
stack<int> st;
if(!st.empty())
{
    cout<<st.top() <<endl;   //throw error if not check
}




//QUEUE ->FIFO DS
//push
//pop
//front
//size
//empty

//all above operation having time complexity of o(1)

queue<int> q;
q.push(1);
q.push(5);
q.push(3);
q.push(6);

cout<<q.front();   //print 1
q.pop();
cout<<q.front();   //print 5

//the time complexity of this operation is o(n)
//delete the entire queue
while(!q.empty())
{
    q.pop();
}



dequeue<int> dq;
//push_front()
//push_back()
//pop_front()
//pop_back()
//begin(), end(), rbegin(), rend()
//size(),clear(),empty()







//PRIORITY_QUEUE

//store all in sorted order and time complexity is log n

// push()
// size()
// top()
// pop()
// empty()

priority_queue<int> pq;
pq.push(1);
pq.push(5);
pq.push(2);
pq.push(6);

// it arrange in descending order(or accornding to prority) here, output ->6,5,2,1

cout<<pq.top();  //print 6
pq.pop();
cout<<pq.top();  //print 5


priority_queue<pair<int,int>> pq;
pq.push(1,5);
pq.push(1,6);
pq.push(1,7);

// Here way of priority is (1,7),(1,6),(1,5)


// for make a ascending priority queue
priority_queue<int> pq;
pq.push(-1);
pq.push(-5);
pq.push(-2);
pq.push(-6);

cout<< -1*pq.top() <<endl;  //print 1


//For min priority queue
priority_queue<int,vector<int>,greater<int>> pq;
pq.push(1);
pq.push(5);
pq.push(2);
pq.push(6);

cout<< pq.top() <<endl;  //print 1





//LIST

list<int> ls;
//push_front()
//push_back()
//pop_front()
//pop_back()
//begin(), end(), rbegin(), rend()
//size(),clear(),empty()
//remove() 

ls.push_front(1);
ls.push_front(2);
ls.push_front(3);
ls.remove(2);    // o(1) operation




//Q. Given N element, print the element that occurs maximum no of times

// input: 5
          1,3,3,3,2

//output: 3


// code
int n;
cin>>n;
map<int,int> mpp;
int maxi=0;
for(int i=0;i<n;i++)
{
    int x;
    cin>>x;
    mpp[x]++;
    if(mpp[x] > mpp[maxi])
    {
        maxi =x;
    }
}
cout<< x <<endl;



*/



//LECTURE-3

/*

// int -> 16 bits
// char -> 8 bits

int a[100];
char a[100];

//bitset -> 1 bit    //only store only 1 and 0

bitset<10> bt;       //generally used in segment tree problem
cin>>bt;            //11111

some function used by bitset container are:-
//all()
cout<<bt.all()  //return a true or a false 
                //if all bits are same than it true and false even 1 bit is diffrent
//any()
cout<<bt.any();   --> true when bt is 10000 any of bt value is 1
                  --> false when bt is 00000 NO value of bt is 1

//count()
//let bt ->10100
cout<<bt.count();  //print the number of set bits
// prints 2


//flip()
//for bt ->10100
cout<< bt.flip(2);     //bt will become ->10000    


//none()
//if none is set,then true,else false
//bt -> 10000
cout<< bt.none();    //false

//bt ->00000
cout<<bt.none();     //true


//set()
bt.set();   //11111

bt.set(2);  //set the 2nd index

bt.set(2,0);  //set the second position as 0


//reset()
bt.reset();   //turn all indexes to 0

bt.reset(2);  //turn the 2nd index to 0


//size()
cout<< bt.size();   //print 5


//test()
cout<< bt.test(1);   //check if the bit is set or not at index 1 





//ALGORITHM

//1.sorting

//By array
int n;
cin>>n;
int arr[n];
for(int i=0;i<n;i++) 
{
    int x;
    cin>>x;
    arr[i]=x;
}
sort(arr,arr+n);  //in increasing order ,time complexity ->nlogn


//By vector
vector<int> vec(5,0);
for(int i=0;i<n;i++)
{
    cin>>vec[i];
}

sort(vec.begin(),vec.end());     //[)

// vec -> {1,6,2,7,4}
//      0 1 2 3 4
//sort it so that only indexes from 1 to 3
//final vec ->{1,2,4,6,7}
sort(vec.begin()+1,vec.begin()+4);




// 2.if i wanna reverse
// reverse(startiterator, enditerator)  ->[)
reverse(arr,arr+n);

reverse(arr+1,arr+4);

reverse(vec.begin(),vec.end());

reverse(vec.begin()+1,vec.begin()+4);




// 3.if i want to find the maximum element in any index range
// i to j give me the maximum

//
*max_element(firstiterator,lastiterator);
int el=*max_element(arr,arr+n);
int el=*min_element(arr,arr+n);

int el=*max_element(vec.begin(),vec.end());
int el=*min_element(vec.begin(),vec.end());






// 4. I give you a range and i want to find the sum in that range
//i-j, tell me the sum in that range i to j

//accumulator(startiterator,enditerator,initialsum)
int sum = accumulator(arr,arr+n,0);
int sum = accumulator(vec.begin(),vec.end(),0);




// 5. arr[] ->{1,6,7,1,2,1,3}
// tell me how many times the elment 1 occurs in the array

//count(startiterator,enditerator,x);
int cnt = count(arr,arr+n;1);
int cnt = count(vec.begin(),vec.end(),1);




// 6.arr[] ->{1,2,5,1,2,4,4}
// i want you to find the first occurrence of 2
// it is in the index 1

auto it =find(arr,arr+n,2);    //return an iterator
//pointing to the first instance of it, or else it
//return pointing to the end() if it is not there 


//arr[] ->{1,5,6,2,3,5,6}
// to gind x=4

auto it = find(vec.begin(),vec.end(),4);
if(it ==vec.end())
{
    cout<<"element is not present";
}
else{
    cout<<"element is first present at: "<< it-vec.begin();
}




// 7.binary search
// this stl only works on sorted arrays
// arr[] ->{1,5,7,9,10}
// for x=9
// true -> 9 exist in my array
// x=8
// false -> 8 does not exist in my array


// syntax: binary_search(firstiterator,lastiterator,x);
// return a true or a false
// works in log n complexity
bool res = binary_search(arr,arr+n,8);
bool res = binary_search(vec.begin(),vec.end(),8);





// 8.Lower_bound function
//return an iterator pointing to the first
//elment which is not less than x
// this works in log n
//arr[] ->{1,5,7,7,8,10,10,10,11,11,12}
//here take x=10   -->point to 10
//works in sorted array

auto it = lower_bound(arr,arr+n,x);
ind =it-arr;

auto it= lower_bound(vec.begin(),vec.end(),x);
int ind =it-vec.begin();

int ind = lower_bound(vec.begin(),vec.end(),x) - vec.begin();





// 9. Upper bound
// return an iterator which points to an elment which is
// just greater than x
//works in sorted array
//arr[] ->{1,5,7,7,8,10,10,10,11,11,12}
// here x= 7  --> point to 8
// here x=12  --> point to end() iterator

auto it= upper_bound(vec.begin(),vec.end(),x);
int ind =it-vec.begin();

int ind = upper_bound(vec.begin(),vec.end(),x) - vec.begin();







//Q1. find me the first index where the elment x lies
// find function can be used but that takes o(n) times
// the arraynis sorted..

int n;
cin>>n;
int arr[n];
for(int i=0;i<n;i++)
{
    cin>> arr[i];
}

int x;
cin>>x;


// 1st way
if(binary_search(arr,arr+n,x) == true)
{
    cout<< lower_bound(arr,arr+n,x) - arr;
}
else cout<<"does not exists";


//2nd way
int ind = lower_bound(arr,arr+n,x)-arr;
//arr[] ->{1,5,7,7,8,10,10,10,11,11,12}
           0 1 2 3 4  5  6  7  8  9 10
//find x=13 -> ind =11,which is out of bound
//hence arr[11] will give you runtime error
if(ind !=n && arr[ind] == x)
{
    cout<<"found at:"<< ind;
}
else{
    cout<<"Not found";
}





// Q2.Find me the last occurrence of x in an arr
//arr[] ->{1,5,7,7,8,10,10,10,11,11,12}
           0 1 2 3 4  5  6  7  8  9 10
// last occurrence of x =10, ans =7th index

int ind = upper_bound(arr,arr+n,x) -arr;
ind -= 1;
if(ind>=0 && arr[ind]== x)
{
    cout<<"last occurrence:"<< ind;
}
else
{
    cout<<"Does not exist";
}





// Q3.Tell me the number of times the x appears in arr
//arr[] ->{1,5,7,7,8,10,10,10,11,11,12}
           0 1 2 3 4  5  6  7  8  9 10

// for x=10, ans= 3 
// for x=7, ans= 2

upper_bound(arr,arr+n,x) - lower_bound(arr,arr+n,x)






// 10. Next Permutation
// string s = "abc"  -> it can be array or any other data type; like arr[] ={2,1,3}
// all permutation are as follows: abc, acb, bac, bca, cab, cba  -> sorted in dictionary order


// s="bca"
bool res = next_permutation(s.begin(), s.end());    --> If it give next permutation then return true, otherwise false
                                                       
// s="cba"
bool res = next_permutation(s.begin(), s.end());    --> return false



// Q.if i give you any random string s="bca"
// i want you to print all the permutation

string s ="bca"
sort{s.begin(),s.endd()};   //this makes the string as "abc"
do{
     cout<< s << endl;
} while(next_permutation(s.begin(),s.end()));


int arr[] ={1,6,5}
int n=3;
sort(arr,arr+n);   //this make the array as {1,5,6}
do{
    for(int i=0;i<n;i++)
    {
        cout<< arr[i] <<" ";
    }
}while(next_permutation(arr,arr+n));




// 11.previous permutation
bool res = prev_permutation(s.begin(),s.end());







// 12.COMPARATOR
sort(arr,arr+n);    //sort everything in ascending order
sort(arr,arr+n,comp);     //descending    


bool comp(int el1, int el2){
    if(el1 <= el2)
    {
        return true;
    }
    return false;
}


//arr
// pair<int,int> arr[] ={{1,4},{5,2},{5,9}};
// after sorting arr[] ={{1,4},{5,9},{5,2}}
sort(arr,arr+3,comp)
// i want you to sort this in such a way that
// the elment who have first elment in pair smaller
// appears first and if first is equal then sort according
// to second and keep the larger second

bool comp(pair<int,int> el1, pair<int,int> el2 )
{
    if(el1.first < el2.first)
    {
         return true;
    }
    if(el1.first == el2.first)
    {
        if(el1.second > el22.second)
        {
            return true;
        }
    }
    return false;
}




// Now,
//descending
sort(arr,arr+n,comp);
// greater<int> is an inbuilt comparator
// which works only if you wanna do this in descending
sort(arr,arr+n,greater<int>);
















*/






















